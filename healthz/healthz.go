package healthz

import (
	"encoding/json"
	"log"
	"net/http"
	"runtime"
	"time"
)

//Config is basic settings to perform app health check
type Config struct {
	Hostname string
}

type handler struct {
	hostname string
	metadata map[string]string
}

//Handler is main entrypoint for healthz page
func Handler(hc *Config) (http.Handler, error) {

	metadata := make(map[string]string)
	metadata["timestamp"] = time.Now().Format(time.Stamp)
	metadata["go_version"] = runtime.Version()
	metadata["os_type"] = runtime.GOOS

	h := &handler{hc.Hostname, metadata}
	return h, nil
}

type response struct {
	Hostname string            `json:"hostname"`
	Metadata map[string]string `json:"metadata"`
	Errors   []errorMeta       `json:"errors"`
}

type errorMeta struct {
	Description string            `json:"description"`
	Error       string            `json:"error"`
	Metadata    map[string]string `json:"metadata"`
	Type        string            `json:"type"`
}

func (h *handler) ServeHTTP(w http.ResponseWriter, r *http.Request) {
	response := response{
		Hostname: h.hostname,
		Metadata: h.metadata,
	}

	statusCode := http.StatusOK
	errors := make([]errorMeta, 0)

	if error := r.FormValue("error"); error != "" {
		errors = append(errors, errorMeta{
			Type:        "StatusInternalServerError",
			Description: "This is a fake error generated by passing in the var ?error=" + error,
			Error:       error,
		})
	}

	response.Errors = errors
	if len(response.Errors) > 0 {
		statusCode = http.StatusInternalServerError
		for _, e := range response.Errors {
			log.Println(e.Error)
		}
	}

	w.Header().Set("Content-Type", "application/json")
	w.WriteHeader(statusCode)
	data, err := json.MarshalIndent(&response, "", "  ")
	if err != nil {
		log.Println(err)
	}
	w.Write(data)
}
